import { ClipperGroup } from "./ClipperGroup";
import { EndType, JoinType } from "./OffsetEnums";
import { Path64 } from "../Core/Path64";
import { PathD } from "../Core/PathD";
import { Paths64 } from "../Core/Paths64";
import { Point64 } from "../Core/Point64";
import { PointD } from "../Core/PointD";
import { Rect64 } from "../Core/Rect64";
import { PolyTree64 } from "../Engine/PolyTree64";
export type DeltaCallback64 = (path: Path64, path_norms: PathD, currPt: number, prevPt: number) => number;
export declare class ClipperOffset {
    _groupList: ClipperGroup[];
    _normals: PathD;
    _solution: Paths64;
    _groupDelta: number;
    _delta: number;
    _mitLimSqr: number;
    _stepsPerRad: number;
    _stepSin: number;
    _stepCos: number;
    _joinType: JoinType;
    _endType: EndType;
    arcTolerance: number;
    mergeGroups: boolean;
    miterLimit: number;
    preserveCollinear: boolean;
    reverseSolution: boolean;
    deltaCallback?: DeltaCallback64;
    constructor(miterLimit?: number, arcTolerance?: number, preserveCollinear?: boolean, reverseSolution?: boolean);
    clear(): void;
    addPath(path: Path64, joinType: JoinType, endType: EndType): void;
    addPaths(paths: Paths64, joinType: JoinType, endType: EndType): void;
    executeInternal(delta: number): void;
    execute(deltaOrDeltaCallback: number | DeltaCallback64, solutionOrPolyTree: Paths64 | PolyTree64): void;
    getUnitNormal(pt1: Point64, pt2: Point64): PointD;
    getBoundsAndLowestPolyIdx(paths: Paths64): {
        index: number;
        rec: Rect64;
    };
    translatePoint(pt: PointD, dx: number, dy: number): PointD;
    reflectPoint(pt: PointD, pivot: PointD): PointD;
    almostZero(value: number, epsilon?: number): boolean;
    hypotenuse(x: number, y: number): number;
    normalizeVector(vec: PointD): PointD;
    getAvgUnitVector(vec1: PointD, vec2: PointD): PointD;
    intersectPoint(pt1a: PointD, pt1b: PointD, pt2a: PointD, pt2b: PointD): PointD;
    getPerpendic(pt: Point64, norm: PointD): Point64;
    getPerpendicD(pt: Point64, norm: PointD): PointD;
    doSquare(group: ClipperGroup, path: Path64, j: number, k: number): void;
    doMiter(group: ClipperGroup, path: Path64, j: number, k: number, cosA: number): void;
    doRound(group: ClipperGroup, path: Path64, j: number, k: number, angle: number): void;
    bulidNormals(path: Path64): void;
    offsetPoint(group: ClipperGroup, path: Path64, j: number, k: number): number;
    offsetPolygon(group: ClipperGroup, path: Path64): void;
    offsetOpenJoined(group: ClipperGroup, path: Path64): void;
    offsetOpenPath(group: ClipperGroup, path: Path64): void;
    doGroupOffset(group: ClipperGroup): void;
}
