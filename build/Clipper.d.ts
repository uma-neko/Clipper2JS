import { ClipType, FillRule } from "./Core/CoreEnums";
import { Path64 } from "./Core/Path64";
import { PathD } from "./Core/PathD";
import { Paths64 } from "./Core/Paths64";
import { PathsD } from "./Core/PathsD";
import { Point64 } from "./Core/Point64";
import { PointD } from "./Core/PointD";
import { Rect64 } from "./Core/Rect64";
import { RectD } from "./Core/RectD";
import { PointInPolygonResult } from "./Engine/EngineEnums";
import { PolyPath64 } from "./Engine/PolyPath64";
import { PolyPathBase } from "./Engine/PolyPathBase";
import { PolyPathD } from "./Engine/PolyPathD";
import { PolyTree64 } from "./Engine/PolyTree64";
import { PolyTreeD } from "./Engine/PolyTreeD";
import { EndType, JoinType } from "./Offset/OffsetEnums";
export declare const roundToEven: (num: number) => number;
export declare const awayFromZeroRounding: (num: number) => number;
export declare function numberToBigInt(num: number): bigint;
export declare function perpendicDistFromLineSqrd<TPoint extends Point64 | PointD>(pt: TPoint, line1: TPoint, line2: TPoint): number;
export declare function sqr(value: number): number;
export declare function rdp(path: Path64 | PathD, begin: number, end: number, epsSqrd: number, flags: boolean[]): void;
export declare const invalidRect64: () => Rect64;
export declare const invalidRectD: () => RectD;
export declare function intersect(subject: Paths64, clip: Paths64, fillRule: FillRule): Paths64;
export declare function intersect(subject: PathsD, clip: PathsD, fillRule: FillRule, precision?: number): PathsD;
export declare function union(subject: Paths64, fillRule: FillRule): Paths64;
export declare function union(subject: Paths64, clip: Paths64, fillRule: FillRule): Paths64;
export declare function union(subject: PathsD, fillRule: FillRule): PathsD;
export declare function union(subject: PathsD, clip: PathsD, fillRule: FillRule, precision?: number): PathsD;
export declare function difference(subject: Paths64, clip: Paths64, fillRule: FillRule): Paths64;
export declare function difference(subject: PathsD, clip: PathsD, fillRule: FillRule, precision?: number): PathsD;
export declare function xor(subject: Paths64, clip: Paths64, fillRule: FillRule): Paths64;
export declare function xor(subject: PathsD, clip: PathsD, fillRule: FillRule, precision?: number): PathsD;
export declare function booleanOp(clipType: ClipType, subject: Paths64, clip: Paths64 | undefined, fillRule: FillRule): Paths64;
export declare function booleanOp(clipType: ClipType, subject: Paths64, clip: Paths64 | undefined, polytree: PolyTree64, fillRule: FillRule): void;
export declare function booleanOp(clipType: ClipType, subject: PathsD, clip: PathsD | undefined, fillRule: FillRule, precision?: number): PathsD;
export declare function booleanOp(clipType: ClipType, subject: PathsD, clip: PathsD | undefined, polytree: PolyTreeD, fillRule: FillRule, precision?: number): void;
export declare function booleanOp<TPaths extends Paths64 | PathsD>(clipType: ClipType, subject: TPaths, clip: TPaths | undefined, fillRuleOrPolyTree: FillRule | PolyTree64 | PolyTreeD, precisionOrFillRule?: number | FillRule, precision?: number): TPaths | void;
export declare function inflatePaths(paths: Paths64, delta: number, joinType: JoinType, endType: EndType, miterLimit?: number): Paths64;
export declare function inflatePaths(paths: PathsD, delta: number, joinType: JoinType, endType: EndType, miterLimit?: number, precision?: number): PathsD;
export declare function rectClip(rect: Rect64, pathOrpaths: Path64 | Paths64): Paths64;
export declare function rectClip(rect: RectD, pathOrPaths: PathD | PathsD, precision?: number): PathsD;
export declare function rectClipLines(rect: Rect64, paths: Paths64): Paths64;
export declare function rectClipLines(rect: Rect64, path: Path64): Paths64;
export declare function rectClipLines(rect: RectD, paths: PathsD, precision?: number): PathsD;
export declare function rectClipLines(rect: RectD, path: PathD, precision?: number): PathsD;
export declare function minkowskiSum(pattern: Path64 | PathD, path: Path64 | PathD, isClosed: boolean): Paths64 | PathsD;
export declare function minkowskiDiff(pattern: Path64 | PathD, path: Path64 | PathD, isClosed: boolean): Paths64 | PathsD;
export declare function area(pathOrPaths: Path64 | PathD | Paths64 | PathsD): number;
export declare function isPositive(poly: Path64 | PathD): boolean;
export declare function path64ToString(path: Path64): string;
export declare function paths64ToString(paths: Paths64): string;
export declare function pathDToString(path: PathD): string;
export declare function pathsDToString(paths: PathsD): string;
export declare function offsetPath(path: Path64, dx: bigint, dy: bigint): Path64;
export declare function scalePoint64(pt: Point64, scale: number): Point64;
export declare function scalePointD(pt: Point64, scale: number): PointD;
export declare function scaleRect(rec: RectD, scale: number): Rect64;
export declare function scalePath<TPath extends Path64 | PathD>(path: TPath, scale: number): TPath;
export declare function scalePaths<TPaths extends Paths64 | PathsD>(paths: TPaths, scale: number): TPaths;
export declare function scalePath64(path: PathD, scale: number): Path64;
export declare function scalePathD(path: Path64, scale: number): PathD;
export declare function scalePaths64(paths: PathsD, scale: number): Paths64;
export declare function scalePathsD(paths: Paths64, scale: number): PathsD;
export declare function path64(path: PathD): Path64;
export declare function paths64(paths: PathsD): Paths64;
export declare function pathD(path: Path64): PathD;
export declare function pathsD(paths: Paths64): PathsD;
export declare function translatePath(path: Path64, dx: bigint, dy: bigint): Path64;
export declare function translatePath(path: PathD, dx: number, dy: number): PathD;
export declare function translatePaths(paths: Paths64, dx: bigint, dy: bigint): Paths64;
export declare function translatePaths(paths: PathsD, dx: number, dy: number): PathsD;
export declare function reversePath<TPath extends Path64 | PathD>(path: TPath): TPath;
export declare function reversePaths<TPaths extends Paths64 | PathsD>(paths: TPaths): TPaths;
export declare function getBounds(path: Path64): Rect64;
export declare function getBounds(paths: Paths64): Rect64;
export declare function getBounds(path: PathD): RectD;
export declare function getBounds(paths: PathsD): RectD;
export declare function makePath64(arr: ArrayLike<number>): Path64;
export declare function makePath64(arr: ArrayLike<bigint>): Path64;
export declare function makePathD(arr: ArrayLike<number>): PathD;
export declare function pointsNearEqual(pt1: PointD, pt2: PointD, distanceSqrd: number): boolean;
export declare function stripNearDuplicates(path: PathD, minEdgeLenSqrd: number, isClosedPath: boolean): PathD;
export declare function stripDuplicates(path: Path64, isClosedPath: boolean): Path64;
export declare function addPolyNodeToPaths(polyPath: PolyPath64, paths: Paths64): void;
export declare function polyTreeToPaths64(polyTree: PolyTree64): Paths64;
export declare function addPolyNodeToPathsD(polyPath: PolyPathD, paths: PathsD): void;
export declare function polyTreeToPathsD(polyTree: PolyTreeD): PathsD;
export declare function ramerDouglasPeucker(path: Path64, epsilon: number): Path64;
export declare function ramerDouglasPeucker(path: Paths64, epsilon: number): Paths64;
export declare function ramerDouglasPeucker(path: PathD, epsilon: number): PathD;
export declare function ramerDouglasPeucker(path: PathsD, epsilon: number): PathsD;
export declare function getNext(current: number, high: number, flags: boolean[]): number;
export declare function getPrior(current: number, high: number, flags: boolean[]): number;
export declare function simplifyPath(path: Path64, epsilon: number, isClosedPath?: boolean): Path64;
export declare function simplifyPath(path: PathD, epsilon: number, isClosedPath?: boolean): PathD;
export declare function simplifyPaths(paths: Paths64, epsilon: number, isClosedPaths?: boolean): Paths64;
export declare function simplifyPaths(paths: PathsD, epsilon: number, isClosedPaths?: boolean): PathsD;
export declare function trimCollinear(path: Path64, isOpen?: boolean): Path64;
export declare function trimCollinear(path: PathD, precision: number, isOpen?: boolean): PathD;
export declare function pointInPolygon(pt: Point64, polygon: Path64): PointInPolygonResult;
export declare function pointInPolygon(pt: PointD, polygon: PathD, precision?: number): PointInPolygonResult;
export declare function ellipse(center: Point64, radiusX: number, radiusY?: number, steps?: number): Path64;
export declare function ellipse(center: PointD, radiusX: number, radiusY?: number, steps?: number): PathD;
export declare function showPolyPathStructure(pp: PolyPathBase, level: number): void;
export declare function showPolyTreeStructure(polytree: PolyTree64 | PolyTreeD): void;
export declare const Clipper: {
    readonly invalidRect64: () => Rect64;
    readonly invalidRectD: () => RectD;
    readonly intersect: typeof intersect;
    readonly union: typeof union;
    readonly difference: typeof difference;
    readonly xor: typeof xor;
    readonly booleanOp: typeof booleanOp;
    readonly inflatePaths: typeof inflatePaths;
    readonly rectClip: typeof rectClip;
    readonly rectClipLines: typeof rectClipLines;
    readonly minkowskiSum: typeof minkowskiSum;
    readonly minkowskiDiff: typeof minkowskiDiff;
    readonly area: typeof area;
    readonly isPositive: typeof isPositive;
    readonly path64ToString: typeof path64ToString;
    readonly paths64ToString: typeof paths64ToString;
    readonly pathDToString: typeof pathDToString;
    readonly pathsDToString: typeof pathsDToString;
    readonly offsetPath: typeof offsetPath;
    readonly scalePoint64: typeof scalePoint64;
    readonly scalePointD: typeof scalePointD;
    readonly scaleRect: typeof scaleRect;
    readonly scalePath: typeof scalePath;
    readonly scalePaths: typeof scalePaths;
    readonly scalePath64: typeof scalePath64;
    readonly scalePaths64: typeof scalePaths64;
    readonly scalePathD: typeof scalePathD;
    readonly scalePathsD: typeof scalePathsD;
    readonly path64: typeof path64;
    readonly paths64: typeof paths64;
    readonly pathsD: typeof pathsD;
    readonly pathD: typeof pathD;
    readonly translatePath: typeof translatePath;
    readonly translatePaths: typeof translatePaths;
    readonly reversePath: typeof reversePath;
    readonly reversePaths: typeof reversePaths;
    readonly getBounds: typeof getBounds;
    readonly makePath64: typeof makePath64;
    readonly makePathD: typeof makePathD;
    readonly sqr: typeof sqr;
    readonly pointsNearEqual: typeof pointsNearEqual;
    readonly stripNearDuplicates: typeof stripNearDuplicates;
    readonly stripDuplicates: typeof stripDuplicates;
    readonly addPolyNodeToPaths: typeof addPolyNodeToPaths;
    readonly polyTreeToPaths64: typeof polyTreeToPaths64;
    readonly addPolyNodeToPathsD: typeof addPolyNodeToPathsD;
    readonly polyTreeToPathsD: typeof polyTreeToPathsD;
    readonly perpendicDistFromLineSqrd: typeof perpendicDistFromLineSqrd;
    readonly ramerDouglasPeucker: typeof ramerDouglasPeucker;
    readonly simplifyPath: typeof simplifyPath;
    readonly simplifyPaths: typeof simplifyPaths;
    readonly trimCollinear: typeof trimCollinear;
    readonly pointInPolygon: typeof pointInPolygon;
    readonly ellipse: typeof ellipse;
    readonly showPolyTreeStructure: typeof showPolyTreeStructure;
};
